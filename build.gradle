import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.github.rodionmoiseev.gradle.plugins', name: 'idea-utils', version: '0.2'
        classpath 'net.saliman:gradle-cobertura-plugin:2.5.2'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "1.2.3"
    id "de.undercouch.download" version "3.1.1"
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'idea-utils'
apply plugin: 'cobertura'

idea {
    project {
        ipr {
            withXml { xmlProvider ->
                def project = xmlProvider.asNode()
                def runConfigs = new XmlParser().parse(new File("config/intellij_runconfigs.xml"))
                project.append(runConfigs)
            }
        }
    }
    module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = project.property("group")
artifactId = project.property("artifactId")
version = project.property("version")
sourceCompatibility = project.property("sourceversion")

dependencies {
    compile group: 'org.spigotmc', name: 'spigot-api', version: project.property("apiversion")
    compile group: 'org.spigotmc', name: 'spigot', version: project.property("apiversion")

    compile "com.beust:jcommander:1.72"
    compile 'com.github.davidmoten:rxjava2-jdbc:0.1-RC19'
    compile 'com.google.inject:guice:4.1.0'
    compile 'io.vavr:vavr:0.9.2'
    compile 'org.reflections:reflections:0.9.11'
    compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
    compile 'org.xerial:sqlite-jdbc:3.21.0'

    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'org.apache.commons:commons-lang3:3.7'

    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'

    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.5'

    compileOnly 'org.projectlombok:lombok:1.16.16'

    // dependencies go here
    // Example:
    // compile group: 'com.google.guava', name: 'guava', version: '19.0'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.3'
    testCompile 'org.powermock:powermock-module-junit4:1.7.3'
    testCompile 'org.assertj:assertj-guava:3.1.0'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.3.3'
}

processResources {
    filter ReplaceTokens, tokens: [
            "apiversion": project.property("apiversion"),
            "version"   : project.property("version")
    ]
}

clean {
    delete "final/"
    delete "server/"
    delete "coverage/"
}

cobertura {
    coverageIgnoreTrivial = true
    coverageReportDir = file('coverage/')
    coverageFormats = ['xml','html']
}

compileJava.dependsOn {
    buildSpigot
}

jar {
    actions = []
    dependsOn = []
    dependsOn('shadowJar')
}

shadowJar {
    dependencies {
        exclude(dependency('org.spigotmc:spigot-api:.*'))
        exclude(dependency('org.spigotmc:spigot:.*'))
    }
}

task deploy(type: Copy, dependsOn: ['build']) {
    from "${buildDir}/libs"
    into "final/"
}

task setupDevServer(dependsOn: 'extractServerJar', type: Copy) {
    from 'config'
    into 'server'
}

task extractServerJar(type: Copy) {
    from {
        configurations.runtime
    }
    include("spigot-" + project.property("apiversion") + ".jar")
    rename("spigot-" + project.property("apiversion") + ".jar", "server.jar")
    into "server/"
}

task copyPluginToTestserver(dependsOn: ['build'], type: Copy) {
    from "${buildDir}/libs"
    into "server/plugins"
}

task prepareDevServer(dependsOn: ['buildSpigot', 'setupDevServer', 'copyPluginToTestserver']) {}

task startDevServer(dependsOn: [prepareDevServer], type: JavaExec) {
    classpath configurations.compile, configurations.runtime
    main = "org.bukkit.craftbukkit.Main"
    workingDir = "server/"
    standardInput = System.in
    jvmArgs = ['-Dlog4j.configurationFile=log4j2.xml']
}

// START Building Spigot and Bukkit

def spigotBuildDir = new File("$buildDir/spigot/")

task setupWorkspace(dependsOn: ['buildSpigot']) {
}

task buildSpigot(type: JavaExec) {
    if (hasSpigot()) {
        enabled = false;
        dependsOn = [];
    } else {
        dependsOn = ['cleanSpigotBuild', 'downloadBuildTool']
    }
    main = '-jar'
    args new File(spigotBuildDir, "BuildTools.jar").getAbsolutePath(), "--rev", project.property("apibuildtoolversion")
    workingDir = spigotBuildDir
}

task downloadBuildTool(type: Download) {
    spigotBuildDir.mkdirs()
    src project.property("buildtoolurl")
    dest new File(spigotBuildDir, "BuildTools.jar")
}

task cleanSpigotBuild() {
    spigotBuildDir.deleteDir()
}

def hasSpigot() {
    def groupId = "org.spigotmc"
    def version = project.property("apiversion")
    return hasArtifact(groupId, "spigot-api", version) && hasArtifact(groupId, "spigot", version)
}

def hasArtifact(groupId, artifactId, version) {
    def localMavenRepo = new File(new File(ant.properties['user.home'] as String), ".m2/repository/")
    def file = new File(localMavenRepo, groupId.replace('.', '/') + "/" + artifactId + "/" + version + "/")
    return file.exists()
}

// END Building Spigot and Bukkit
